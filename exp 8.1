// server.js

const express = require('express');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = 3000;
// ⚠️ IMPORTANT: In a real app, this should be a strong, complex secret 
// loaded from an environment variable (e.g., process.env.JWT_SECRET)
const SECRET_KEY = 'your_super_secret_key'; 

// Middleware to parse JSON bodies from incoming requests
app.use(express.json());

// --- Hardcoded User (for demonstration) ---
const TEST_USER = {
    id: 1,
    username: 'testuser',
    password: 'password123' 
};

// ==========================================================
// 1. JWT VERIFICATION MIDDLEWARE
// ==========================================================
function verifyToken(req, res, next) {
    // 1. Get the Authorization header (e.g., "Bearer eyJ...")
    const authHeader = req.headers['authorization'];
    
    // Check for "Bearer <token>" format
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        // 403 Forbidden: Request understood, but refused to authorize.
        return res.status(403).json({ message: 'Access denied. Token is missing or improperly formatted.' });
    }

    // 2. Extract the token (everything after "Bearer ")
    const token = authHeader.split(' ')[1];

    // 3. Verify the token
    jwt.verify(token, SECRET_KEY, (err, decodedUser) => {
        if (err) {
            // 401 Unauthorized: Token is invalid (expired, wrong signature, etc.)
            return res.status(401).json({ message: 'Unauthorized: Invalid or expired token.' });
        }
        
        // 4. Token is valid: Attach the decoded payload (user info) to the request
        req.user = decodedUser;
        // Proceed to the route handler
        next();
    });
}

// ==========================================================
// 2. LOGIN ROUTE (Token Issuance)
// POST http://localhost:3000/login
// ==========================================================
app.post('/login', (req, res) => {
    const { username, password } = req.body;

    // Simulate credential check
    if (username !== TEST_USER.username || password !== TEST_USER.password) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Create the JWT payload (don't include sensitive info like password!)
    const jwtPayload = { 
        id: TEST_USER.id, 
        username: TEST_USER.username 
    };

    // Sign the token, setting it to expire in 1 hour
    const token = jwt.sign(jwtPayload, SECRET_KEY, { expiresIn: '1h' });

    // Send the token back to the client
    res.json({ token: token });
});

// ==========================================================
// 3. PROTECTED ROUTE (Token Consumption)
// GET http://localhost:3000/protected
// ==========================================================
// The `verifyToken` function runs BEFORE the route handler
app.get('/protected', verifyToken, (req, res) => {
    // This code only runs if the token was successfully verified
    // req.user contains the decoded payload (id, username, iat, exp)
    const userPayload = { ...req.user }; 
    delete userPayload.iat; // Remove "Issued At" timestamp for cleaner output
    delete userPayload.exp; // Remove "Expiration" timestamp for cleaner output

    res.json({
        message: 'You have accessed a protected route!',
        user: req.user
    });
});


app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
