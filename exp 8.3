// routes.js - Contains all authentication, authorization, and protected routes

const express = require('express');
const jwt = require('jsonwebtoken');
// Create an Express router instance
const router = express.Router();

const SECRET_KEY = 'your_super_secret_rbac_key'; 

// ----------------------------------------------------------------------
// 1. HARDCODED USERS with ROLES
// ----------------------------------------------------------------------
const USERS = [
    { id: 1, username: 'adminUser', password: 'admin123', role: 'Admin' },
    { id: 2, username: 'modUser', password: 'mod123', role: 'Moderator' },
    { id: 3, username: 'basicUser', password: 'user123', role: 'User' }
];

// --- Router Health Check ---
router.get('/', (req, res) => {
    res.json({ message: 'API router operational.' });
});

// ----------------------------------------------------------------------
// 2. TOKEN ISSUANCE / LOGIN ROUTE
// POST /api/login
// ----------------------------------------------------------------------
router.post('/login', (req, res) => {
    const { username, password } = req.body;

    const user = USERS.find(u => u.username === username && u.password === password);

    if (!user) {
        return res.status(401).json({ message: 'Invalid username or password.' });
    }

    // Include the 'role' in the JWT payload! This is crucial for RBAC.
    const jwtPayload = { 
        id: user.id, 
        username: user.username,
        role: user.role 
    };

    const token = jwt.sign(jwtPayload, SECRET_KEY, { expiresIn: '1h' });

    res.json({ token: token });
});


// ----------------------------------------------------------------------
// 3. CORE MIDDLEWARE: JWT Verification (Authentication)
// ----------------------------------------------------------------------
function verifyToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(403).json({ message: 'Access denied: No token provided.' });
    }

    const token = authHeader.split(' ')[1];

    jwt.verify(token, SECRET_KEY, (err, decodedUser) => {
        if (err) {
            return res.status(401).json({ message: 'Unauthorized: Invalid or expired token.' });
        }
        
        req.user = decodedUser;
        next();
    });
}


// ----------------------------------------------------------------------
// 4. RBAC MIDDLEWARE: Role Checking (Authorization)
// ----------------------------------------------------------------------
function checkRole(requiredRoles) {
    return (req, res, next) => {
        const userRole = req.user && req.user.role;

        if (!userRole) {
            return res.status(500).json({ message: 'Internal Server Error: User role not found.' });
        }

        // Check if the user's role is included in the list of allowed roles
        if (requiredRoles.includes(userRole)) {
            next(); // Role authorized, proceed to the route handler
        } else {
            // 403 Forbidden: Insufficient permissions
            return res.status(403).json({ message: 'Access denied: insufficient role' });
        }
    };
}


// ----------------------------------------------------------------------
// 5. PROTECTED ROUTES (Applying Auth + RBAC)
// These routes will be prefixed by '/api' in the main app.
// ----------------------------------------------------------------------

// --- Admin-Only Route ---
router.get('/admin-dashboard', verifyToken, checkRole(['Admin']), (req, res) => {
    res.json({
        message: 'Welcome to the Admin dashboard, you have full control.',
        user: req.user
    });
});

// --- Moderator and Admin Route ---
router.get('/moderator-panel', verifyToken, checkRole(['Admin', 'Moderator']), (req, res) => {
    res.json({
        message: 'Welcome to the Moderator panel, manage user content here.',
        user: req.user
    });
});

// --- General User Route ---
router.get('/user-profile', verifyToken, checkRole(['Admin', 'Moderator', 'User']), (req, res) => {
    res.json({
        message: `Welcome to your profile, ${req.user.username}`,
        user: req.user
    });
});

// Export the router so the main server file can use it
module.exports = router;
